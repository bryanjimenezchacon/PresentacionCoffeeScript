// Generated by CoffeeScript 1.6.1

(function() {
  var LargeSteps, SmallSteps, Step, adam, divideByTwo, family, list, mark, race, setNumber,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  setNumber = 42;

  $(function() {
    $('.assignedNumber').click(function() {
      return alert(setNumber);
    });
    $('.assignedNumberText').click(function() {
      return alert("Assigned Number is " + setNumber);
    });
    $('.assignedNumberMulti').click(function() {
      return alert("Assigned Number is " + setNumber + " which is a value set in the main.coffee file");
    });
    $('.biggerThan50').click(function() {
      var biggerThan50;
      biggerThan50 = setNumber > 50 ? 'Yes' : 'No';
      return alert(biggerThan50);
    });
    $('.switchRange').click(function() {
      switch (setNumber) {
        case 41:
          return alert('Snake');
        case 42:
          return alert('Dog');
        case 43:
          return alert('Cat');
        default:
          return alert('No animal present');
      }
    });
    $('.tryCatchFinally').click(function() {
      var tmpvar;
      tmpvar = setNumber;
      try {
        setNumber += 5;
        return alert(setNumber);
      } catch (error) {
        return alert(error);
      } finally {
        setNumber = tmpvar;
      }
    });
    $('.divideByTwo').click(function() {
      return alert(divideByTwo(setNumber));
    });
    $('.arrayExample').click(function() {
      return alert(list);
    });
    $('.objectExample').click(function() {
      return alert("Mums name is " + family.mum.name + " whos age is " + family.mum.age);
    });
    $('.loopExample').click(function() {
      var totalval, value, _i, _len;
      totalval = 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        value = list[_i];
        if (value !== 3) {
          totalval += value;
        }
      }
      return alert(totalval);
    });
    $('.slicingExample').click(function() {
      return alert(list.slice(1, 4));
    });
    $('.splicingExample').click(function() {
      return alert(list.slice(3));
    });
    $('.splatExample').click(function() {
      return race.apply(null, ["Adam", "Mark", "Luke", "John"]);
    });
    return $('.classesExample').click(function() {
      adam.move();
      return mark.move();
    });
  });

  divideByTwo = function(x) {
    return x / 2;
  };

  list = [1, 2, 3, 4, 5];

  family = {
    mum: {
      name: "Jane",
      age: 34
    },
    dad: {
      name: "Jon",
      age: 37
    },
    son: {
      name: "Mark",
      age: 12
    }
  };

  race = function() {
    var runners, winner;
    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return alert("The winner is: " + winner + ". Others that ran were: " + runners);
  };

  Step = (function() {

    function Step(name) {
      this.name = name;
    }

    Step.prototype.move = function(meters) {
      return alert("Moving " + this.name + (" " + meters + " steps"));
    };

    return Step;

  })();

  SmallSteps = (function(_super) {

    __extends(SmallSteps, _super);

    function SmallSteps() {
      return SmallSteps.__super__.constructor.apply(this, arguments);
    }

    SmallSteps.prototype.move = function() {
      return SmallSteps.__super__.move.call(this, 5);
    };

    return SmallSteps;

  })(Step);

  LargeSteps = (function(_super) {

    __extends(LargeSteps, _super);

    function LargeSteps() {
      return LargeSteps.__super__.constructor.apply(this, arguments);
    }

    LargeSteps.prototype.move = function() {
      return LargeSteps.__super__.move.call(this, 45);
    };

    return LargeSteps;

  })(Step);

  adam = new SmallSteps("Adam");

  mark = new LargeSteps("Mark");

}).call(this);
